node-sass
node-sass는 Node.js를 컴파일러인 LibSass에 바인딩한 라이브러리 입니다.
NPM으로 전역 설치하여 사용합니다.

$ npm install -g node-sass
컴파일하려는 파일의 경로와 컴파일된 파일이 저장될 경로를 설정합니다.
[]는 선택사항입니다.

$ node-sass [옵션] <입력파일경로> [출력파일경로]
$ node-sass scss/main.scss public/main.css
여러 출력 경로를 설정할 수 있습니다.

$ node-sass scss/main.scss public/main.css dist/style.css
옵션을 적용할 수도 있습니다.
옵션으로 --watch 혹은 -w를 입력하면, 런타임 중 파일을 감시하여 저장 시 자동으로 변경 사항을 컴파일합니다.

$ node-sass --watch scss/main.scss public/main.css
기타 옵션은 node-sass CLI에서 확인할 수 있습니다.

Gulp
빌드 자동화 도구(JavaScript Task Runner)인 Gulp에서는 gulpfile.js을 만들어 아래와 같이 설정할 수 있습니다.
먼저 gulp 명령을 사용하기 위해서는 전역 설치가 필요합니다.

$ npm install -g gulp
Gulp와 함께 Sass 컴파일러인 gulp-sass를 개발 의존성(devDependency) 모드로 설치합니다.
gulp-sass는 위에서 살펴본 node-sass를 Gulp에서 사용할 수 있도록 만들어진 플러그인입니다.

$ npm install --save-dev gulp gulp-sass
// gulpfile.js
var gulp = require('gulp')
var sass = require('gulp-sass')

// 일반 컴파일
gulp.task('sass', function () {
  return gulp.src('./src/scss/*.scss')  // 입력 경로
    .pipe(sass().on('error', sass.logError))
    .pipe(gulp.dest('./dist/css'));  // 출력 경로
});

// 런타임 중 파일 감시
gulp.task('sass:watch', function () {
  gulp.watch('./src/scss/*.scss', ['sass']);  // 입력 경로와 파일 변경 감지 시 실행할 Actions(Task Name)
});
환경을 설정했으니 컴파일합니다.

$ gulp sass
런타임 중 파일 감시 모드로 실행할 수도 있습니다.

$ gulp sass:watch
Webpack
JavaScript 모듈화 도구인 Webpack의 설정은 좀 더 복잡합니다.
Webpack - 1 - 시작하기 / EJS / SASS(SCSS) 포스트를 참고하세요.






Parcel
웹 애플리케이션 번들러 Parcel은 굉장히 단순하게 컴파일할 수 있습니다.
좀 더 자세한 내용은 Parcel - 시작하기 / SASS / PostCSS / Babel / Production을 참고하세요.

우선 Parcel를 전역으로 설치합니다.

$ npm install -g parcel-bundler
프로젝트에 Sass 컴파일러(node-sass)를 설치합니다.

$ npm install --save-dev node-sass
이제 HTML에 <link>로 Sass 파일만 연결하면 됩니다.
다른 설정은 필요하지 않습니다.

<link rel="stylesheet" href="scss/main.scss">
$ parcel index.html
# 혹은
$ parcel build index.html
dist/에서 컴파일된 Sass 파일을 볼 수 있고,
별도의 포트 번호를 설정하지 않았다면 http://localhost:1234에 접속하여 적용 상태를 확인할 수 있습니다.

