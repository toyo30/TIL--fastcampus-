# Section04-3
# 파이썬 데이터 타입(자료형)
# 리스트, 튜플

# 리스트 자료형(순서O, 중복O, 수정O, 삭제O) ----> 꼭 왜워야 함. 
####배열이라고 생각하면 된다. 많은 변수를 선언하는 것은 번거롭고 시간이 많이 걸리는 작업임.

# 선언
a = []
b = list()  #여기 않에 [1,2,3,4] 이와 같은 형식으로 넣어주어야 함. 
c = [1, 2, 3, 4]
d = [10, 100, 'Pen', 'Cap', 'Plate']
e = [10, 100, ['Pen', 'Cap', 'Plate']]  #리스트 중첩가능.
f = [10, 100, ['Pen12312', [1,2,3,4,5], 'Cap', 'Plate']] 

# 인덱싱    #변경할 수 없는 문자열을 가지고 테스트를 한 것. 
print('#=====#')
print('d - ', type(d), d)
print('d - ', d[1])
print('d - ', d[0] + d[1] + d[1])
print('d - ', d[-1])
print('e - ', e[-1][1]) ###print(e[-1]) 하면 중첩된 리스트 전체가 나오고 , 거기서 1을 의미한다. 중첩된 리스트 거꾸로 해서 1에 해당한 것을 꺼내겠다. 
print('f - ', f[-1][1][4])  ##3개가 중첩된 리스트를 의미함. 
print('e - ', list(e[-1][1])) ##어떤 문자열, 숫자열이 쓸라이싱되서 리스트에 저장됨



# 슬라이싱
print('#=====#')
print('d - ', d[0:3])  ### 3전까지 나옴. 
print('d - ', d[2:])   ### 2부터 끝까지 나옴.  
print('e - -----------------------', e[2][:])
print('f - -----------------------', f[2][1:3])

# 리스트 연산
print('#=====#')
print('c + d - ', c + d)  #하나의 리스트로 확장이 됨.
print('c * 3 - ', c * 3)  #리스트의 길이가 3번 반복됨. print("c[0] + 'hi' - ",c[0] + 'hi')
print("'hi' + c[0] - ", 'hi' + str(c[0])) #숫자형을 문자형으로 만들어서 더 할 수 있다.  문자열길이가 늘어남

# 리스트 수정, 삭제
print('#=====#')
c[0] = 4
print('c - ', c)
c[1:2] = ['a', 'b', 'c']  ###!!! 1부터 2사잉의 구간에 'a', 'b', 'c'가 추가됨.
####무조건 []형태가 있어야 함.
c[1:4] =['12312312214'] ##사이값들이 사라짐. 

print('c - ', c)
c[1] = ['a', 'b', 'c']  ### 슬라이싱 처리를 했을 때는 원소가 들어가지만, 하나의 인덱스를 잡고 하나의 인덱스를 넣으면 리스트자체가 들어감.
###가로를 없애면 c[1] ="1234" c[1] = "안녕하세요" c[1] =1234 하나의 원소로 들어감.
###원소를 여러개 넣고 싶을 때는 슬라이싱을 통해서 수정, 리스트를 넣고 싶을 때는 하나의 슬라이싱을 통해서 
print('c - ', c)
c[1:3] = []
print('c - ', c)
del c[3]
print('c - ', c)   ###삭제하겟다. 그 인덱스의 값을 삭제하겠다. 
###삭제하는 함수도 있음. 

# 리스트 함수
a = [5, 2, 3, 1, 4]

print('a - ', a)
a.append(6)    ###끝부분에 요소 추가한 채로 저장됨. 
print('a - ', a)
a.sort()       ### 순서대로 정렬하기.  그냥 함수다 순서대로 저장됨
print('a - ', a)
a.reverse()     ## 반대로 저장이 됨.
print('a - ', a)
print('a - ', a.index(5))
a.insert(2, 7) ###a.append(6)는 끝에 입력되기. insert는 인덱스자리에 추가하기..
print('a - ', a)
a.reverse()
a.remove(1)  #### 숫자 2를 지우기. del a[1] 인덱스를 지웠지만, remove는 숫자를 지워주기.
print('a - ', a)
print('a - ', a.pop())  ##맨마지막을 꺼내고, 없애버리는 것. stack = last in first out
print('a - ', a.pop())
print('a - ', a)
print('a - ', a.count(4))
ex = [8, 9]
a.extend(ex)   ###무조건 리스트 형태로 원소를 넣어야함. append의 경우 리스트 전체가 들어감
#### a[-1] = [1,2,3]  a.append 리스트가 통째로 끝부분에 들어감. 
### a[-1] = 1,2,3     ex =[1,2,3]  a.extend([1,2,3]) 연장을 하겠다. 끝에 원소 형태로 들어감.
### extend 연장을 하겠다. append 자체를 넣겠다.
### a.insert(2, 7)  a[2:3] =[7] 원소를 넣음(무조건[]있어야 함.)
print('a - ', a)

# 삭제 remove, pop, del
### a.pop 끝에서 부터 삭제하기 ----> 언젠가 에러가 생길 수도 있음.
#### del a[1] 인덱스를 이용해 삭제하기, 함수가 아니라 예약어다. 
##???? 예약어랑 함수의 차이가 뭐지
#### a.remove(2) 인덱스가 아니라 숫자를 지워주기. 하나만 지움. for 문을 이용해서 전체지우기
### a.clear() 전체 지우기.


# 반복문 활용   언젠가 에러가 생길 수도 있음.
while a:
    l = a.pop()
    print(2 is l)#### ㅣ안에 2가 있는지?  True or False

# 튜플 자료형(순서O, 중복O, 수정X,삭제X)
#### 수정 삭제가 안 되는데 어디다 쓰냐? 프로그램에 영향을 끼치는 키값. 변경되면 안 되는 값.
### 중요데이터는 튜플로 만들면 됨.

# 선언
a = ()
b = (1,)   ### 하나만 할 때는 쉼표 넣어주기. 
c = (1, 2, 3, 4)
d = (10, 100, 'Pen', 'Cap', 'Plate')
e = (10, 100, ('Pen', 'Cap', 'Plate'))

# 인덱싱
print('#=====#')
print('d - -------------', type(d), d)
print('d - ', d[1])
print('d - --------------', d[0] + d[1] + d[1]) ##숫자가 나오면 다 저장됨
print('d - ', d[-1])
print('e - ', e[-1][1])
print('e - ', f[-1][1][4])
print('e - ', list(e[-1][1]))

# 슬라이싱
print('#=====#')
print('d - ', d[0:3])
print('d - ', d[2:])
print('e - ', e[2][1:3])

# 튜플 연산
print('#=====#')
print('c + d - ', c + d)  ##하나의 튜플을 반환함. 
print('c * 3 - ', c * 3)  ## 확장이 됨.
# print("c[0] + 'hi' - ",c[0] + 'hi')
print("'hi' + c[0] - ", 'hi' + str(c[0]))

# 튜플 함수
a = (5, 2, 3, 1, 4)

print('a - ', a)
print('a - ', a.index(5)) ### 5가 잇는 곳에 인덱스를 반환함. 
print('a - ', a.count(4)) ## 내가 찾고자 하는 숫자가 몇 개인지를 반환함.

print("있는지 없는지 묻기:", 3 in a)
